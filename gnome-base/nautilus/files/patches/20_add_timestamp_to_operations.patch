Description: Add *WithTimestamp dbus methods for file operations that
  might trigger a dialog, that should be presented with event time.

Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/nautilus/+bug/1445595
Bug: https://bugzilla.gnome.org/show_bug.cgi?id=758833
Forwarded: yes
Author: Marco Trevisan <marco@ubuntu.com>
From 13b0e898fbc80230333bb53dfffaa26a32889279 Mon Sep 17 00:00:00 2001
From: Tim Lunn <tim@feathertop.org>
Date: Sat, 20 Feb 2016 08:26:51 +1100
Subject: [PATCH] 20_timestamp

---

Index: nautilus/data/dbus-interfaces.xml
===================================================================
--- nautilus.orig/data/dbus-interfaces.xml
+++ nautilus/data/dbus-interfaces.xml
@@ -27,13 +27,28 @@
       <arg type='as' name='SourceFilesURIList' direction='in'/>
       <arg type='s' name='DestinationDirectoryURI' direction='in'/>
     </method>
+    <method name='CopyURIsWithTimestamp'>
+      <arg type='as' name='SourceFilesURIList' direction='in'/>
+      <arg type='s' name='DestinationDirectoryURI' direction='in'/>
+      <arg type='u' name='EventTimestamp' direction='in'/>
+    </method>
     <method name='EmptyTrash'>
     </method>"
+    <method name='EmptyTrashWithTimestamp'>
+      <arg type='u' name='EventTimestamp' direction='in'/>
+    </method>"
     <method name='CopyFile'>
       <arg type='s' name='SourceFileURI' direction='in'/>
       <arg type='s' name='SourceDisplayName' direction='in'/>
       <arg type='s' name='DestinationDirectoryURI' direction='in'/>
       <arg type='s' name='DestinationDisplayName' direction='in'/>
     </method>
+    <method name='CopyFileWithTimestamp'>
+      <arg type='s' name='SourceFileURI' direction='in'/>
+      <arg type='s' name='SourceDisplayName' direction='in'/>
+      <arg type='s' name='DestinationDirectoryURI' direction='in'/>
+      <arg type='s' name='DestinationDisplayName' direction='in'/>
+      <arg type='u' name='EventTimestamp' direction='in'/>
+    </method>
   </interface>
 </node>
Index: nautilus/libnautilus-private/nautilus-file-operations.c
===================================================================
--- nautilus.orig/libnautilus-private/nautilus-file-operations.c
+++ nautilus/libnautilus-private/nautilus-file-operations.c
@@ -72,6 +72,7 @@ typedef struct {
 	GtkWindow *parent_window;
 	int screen_num;
 	guint inhibit_cookie;
+	guint32 action_timestamp;
 	NautilusProgressInfo *progress;
 	GCancellable *cancellable;
 	GHashTable *skip_files;
@@ -1061,6 +1062,7 @@ typedef struct {
 	const char *details_text;
 	const char **button_titles;
 	gboolean show_all;
+	guint32 timestamp;
 	int result;
 	/* Dialogs are ran from operation threads, which need to be blocked until
 	 * the user gives a valid response
@@ -1104,7 +1106,8 @@ do_run_simple_dialog (gpointer _data)
 	}
 	
 	/* Run it. */
-        result = gtk_dialog_run (GTK_DIALOG (dialog));
+	gtk_window_present_with_time (GTK_WINDOW (dialog), data->timestamp);
+	result = gtk_dialog_run (GTK_DIALOG (dialog));
 	
 	while ((result == GTK_RESPONSE_NONE || result == GTK_RESPONSE_DELETE_EVENT) && data->ignore_close_box) {
 		result = gtk_dialog_run (GTK_DIALOG (dialog));
@@ -1145,6 +1148,7 @@ run_simple_dialog_va (CommonJob *job,
 	data->secondary_text = secondary_text;
 	data->details_text = details_text;
 	data->show_all = show_all;
+	data->timestamp = job->action_timestamp;
 	data->completed = FALSE;
 	g_mutex_init (&data->mutex);
 	g_cond_init (&data->cond);
@@ -5065,6 +5069,27 @@ nautilus_file_operations_copy_file (GFil
 				    NautilusCopyCallback done_callback,
 				    gpointer done_callback_data)
 {
+	nautilus_file_operations_copy_file_with_time (source_file,
+						      target_dir,
+						      source_display_name,
+						      new_name,
+						      parent_window,
+						      GDK_CURRENT_TIME,
+						      done_callback,
+						      done_callback_data);
+}
+
+void
+nautilus_file_operations_copy_file_with_time (GFile *source_file,
+					      GFile *target_dir,
+					      const gchar *source_display_name,
+					      const gchar *new_name,
+					      GtkWindow *parent_window,
+					      guint32 timestamp,
+					      NautilusCopyCallback done_callback,
+				      gpointer done_callback_data)
+{
+
 	GTask *task;
 	CopyMoveJob *job;
 
@@ -5077,6 +5102,7 @@ nautilus_file_operations_copy_file (GFil
         nautilus_progress_info_set_destination (((CommonJob *)job)->progress, target_dir);
 	job->target_name = g_strdup (new_name);
 	job->debuting_files = g_hash_table_new_full (g_file_hash, (GEqualFunc)g_file_equal, g_object_unref, NULL);
+	((CommonJob *)job)->action_timestamp = timestamp;
 
 	if (source_display_name != NULL) {
 		gchar *path;
@@ -5104,6 +5130,24 @@ nautilus_file_operations_copy (GList *fi
 			       NautilusCopyCallback  done_callback,
 			       gpointer done_callback_data)
 {
+	nautilus_file_operations_copy_with_time (files,
+		                                 relative_item_points,
+		                                 target_dir,
+		                                 parent_window,
+		                                 GDK_CURRENT_TIME,
+		                                 done_callback,
+		                                 done_callback_data);
+}
+
+void
+nautilus_file_operations_copy_with_time (GList                *files,
+					 GArray               *relative_item_points,
+					 GFile                *target_dir,
+					 GtkWindow            *parent_window,
+					 guint32               timestamp,
+					 NautilusCopyCallback  done_callback,
+					 gpointer              done_callback_data)
+{
 	GTask *task;
 	CopyMoveJob *job;
 
@@ -5112,6 +5156,7 @@ nautilus_file_operations_copy (GList *fi
 	job->done_callback_data = done_callback_data;
 	job->files = g_list_copy_deep (files, (GCopyFunc) g_object_ref, NULL);
 	job->destination = g_object_ref (target_dir);
+	((CommonJob *)job)->action_timestamp = timestamp;
         /* Need to indicate the destination for the operation notification open
          * button. */
         nautilus_progress_info_set_destination (((CommonJob *)job)->progress, target_dir);
@@ -6933,6 +6978,13 @@ empty_trash_job (GIOSchedulerJob *io_job
 void 
 nautilus_file_operations_empty_trash (GtkWidget *parent_view)
 {
+	nautilus_file_operations_empty_trash_with_time (parent_view, GDK_CURRENT_TIME);
+}
+
+void
+nautilus_file_operations_empty_trash_with_time (GtkWidget *parent_view,
+						guint32    timestamp)
+{
 	GTask *task;
 	EmptyTrashJob *job;
 	GtkWindow *parent_window;
@@ -6945,6 +6997,7 @@ nautilus_file_operations_empty_trash (Gt
 	job->trash_dirs = g_list_prepend (job->trash_dirs,
 					  g_file_new_for_uri ("trash:"));
 	job->should_confirm = TRUE;
+	((CommonJob *)job)->action_timestamp = timestamp;
 
 	inhibit_power_manager ((CommonJob *)job, _("Emptying Trash"));
 
Index: nautilus/libnautilus-private/nautilus-file-operations.h
===================================================================
--- nautilus.orig/libnautilus-private/nautilus-file-operations.h
+++ nautilus/libnautilus-private/nautilus-file-operations.h
@@ -62,7 +62,17 @@ void nautilus_file_operations_copy_file
 					 GtkWindow *parent_window,
 					 NautilusCopyCallback done_callback,
 					 gpointer done_callback_data);
+void nautilus_file_operations_copy_file_with_time (GFile *source_file,
+						   GFile *target_dir,
+						   const gchar *source_display_name,
+						   const gchar *new_name,
+						   GtkWindow *parent_window,
+						   guint32 timestamp,
+						   NautilusCopyCallback done_callback,
+						   gpointer done_callback_data);
 void nautilus_file_operations_empty_trash (GtkWidget                 *parent_view);
+void nautilus_file_operations_empty_trash_with_time (GtkWidget *parent_view,
+	                                             guint32    timestamp);
 void nautilus_file_operations_new_folder  (GtkWidget                 *parent_view,
 					   GdkPoint                  *target_point,
 					   const char                *parent_dir_uri,
@@ -126,6 +136,13 @@ void nautilus_file_operations_copy
 					 GtkWindow            *parent_window,
 					 NautilusCopyCallback  done_callback,
 					 gpointer              done_callback_data);
+void nautilus_file_operations_copy_with_time (GList                *files,
+					      GArray               *relative_item_points,
+					      GFile                *target_dir,
+					      GtkWindow            *parent_window,
+					      guint32               timestamp,
+					      NautilusCopyCallback  done_callback,
+					      gpointer              done_callback_data);
 void nautilus_file_operations_move      (GList                *files,
 					 GArray               *relative_item_points,
 					 GFile                *target_dir,
Index: nautilus/src/nautilus-dbus-manager.c
===================================================================
--- nautilus.orig/src/nautilus-dbus-manager.c
+++ nautilus/src/nautilus-dbus-manager.c
@@ -57,13 +57,12 @@ nautilus_dbus_manager_dispose (GObject *
   G_OBJECT_CLASS (nautilus_dbus_manager_parent_class)->dispose (object);
 }
 
-static gboolean
-handle_copy_file (NautilusDBusFileOperations *object,
-		  GDBusMethodInvocation *invocation,
-		  const gchar *source_uri,
-		  const gchar *source_display_name,
-		  const gchar *dest_dir_uri,
-		  const gchar *dest_name)
+static void
+copy_file (const gchar *source_uri,
+	   const gchar *source_display_name,
+	   const gchar *dest_dir_uri,
+	   const gchar *dest_name,
+	   guint32 timestamp)
 {
   GFile *source_file, *target_dir;
   const gchar *target_name = NULL, *source_name = NULL;
@@ -82,16 +81,41 @@ handle_copy_file (NautilusDBusFileOperat
 
   g_object_unref (source_file);
   g_object_unref (target_dir);
+}
+
+static gboolean
+handle_copy_file (NautilusDBusFileOperations *object,
+		  GDBusMethodInvocation *invocation,
+		  const gchar *source_uri,
+		  const gchar *source_display_name,
+		  const gchar *dest_dir_uri,
+		  const gchar *dest_name)
+{
+  copy_file (source_uri, source_display_name, dest_dir_uri, dest_name, GDK_CURRENT_TIME);
 
   nautilus_dbus_file_operations_complete_copy_file (object, invocation);
   return TRUE; /* invocation was handled */
 }
 
 static gboolean
-handle_copy_uris (NautilusDBusFileOperations *object,
-		  GDBusMethodInvocation *invocation,
-		  const gchar **sources,
-		  const gchar *destination)
+handle_copy_file_with_timestamp (NautilusDBusFileOperations *object,
+				 GDBusMethodInvocation *invocation,
+				 const gchar *source_uri,
+				 const gchar *source_display_name,
+				 const gchar *dest_dir_uri,
+				 const gchar *dest_name,
+				 guint32 timestamp)
+{
+  copy_file (source_uri, source_display_name, dest_dir_uri, dest_name, timestamp);
+
+  nautilus_dbus_file_operations_complete_copy_file_with_timestamp (object, invocation);
+  return TRUE; /* invocation was handled */
+}
+
+static void
+copy_uris (const gchar **sources,
+	   const gchar *destination,
+	   guint32 timestamp)
 {
   GList *source_files = NULL;
   GFile *dest_dir;
@@ -103,18 +127,40 @@ handle_copy_uris (NautilusDBusFileOperat
     source_files = g_list_prepend (source_files,
                                    g_file_new_for_uri (sources[idx]));
 
-  nautilus_file_operations_copy (source_files, NULL,
-                                 dest_dir,
-                                 NULL, NULL, NULL);
+  nautilus_file_operations_copy_with_time (source_files, NULL,
+					   dest_dir,
+					   NULL,
+					   timestamp,
+					   NULL, NULL);
 
   g_list_free_full (source_files, g_object_unref);
   g_object_unref (dest_dir);
+}
 
+static gboolean
+handle_copy_uris (NautilusDBusFileOperations *object,
+		  GDBusMethodInvocation *invocation,
+		  const gchar **sources,
+		  const gchar *destination)
+{
+  copy_uris (sources, destination, GDK_CURRENT_TIME);
   nautilus_dbus_file_operations_complete_copy_uris (object, invocation);
   return TRUE; /* invocation was handled */
 }
 
 static gboolean
+handle_copy_uris_with_timestamp (NautilusDBusFileOperations *object,
+				 GDBusMethodInvocation *invocation,
+				 const gchar **sources,
+				 const gchar *destination,
+				 guint32 timestamp)
+{
+  copy_uris (sources, destination, timestamp);
+  nautilus_dbus_file_operations_complete_copy_uris_with_timestamp (object, invocation);
+  return TRUE;
+}
+
+static gboolean
 handle_empty_trash (NautilusDBusFileOperations *object,
 		    GDBusMethodInvocation *invocation)
 {
@@ -124,6 +170,17 @@ handle_empty_trash (NautilusDBusFileOper
   return TRUE; /* invocation was handled */
 }
 
+static gboolean
+handle_empty_trash_with_timestamp (NautilusDBusFileOperations *object,
+				   GDBusMethodInvocation *invocation,
+				   guint32 timestamp)
+{
+  nautilus_file_operations_empty_trash_with_time (NULL, timestamp);
+
+  nautilus_dbus_file_operations_complete_empty_trash_with_timestamp (object, invocation);
+  return TRUE; /* invocation was handled */
+}
+
 static void
 nautilus_dbus_manager_init (NautilusDBusManager *self)
 {
@@ -141,6 +198,19 @@ nautilus_dbus_manager_init (NautilusDBus
 		    "handle-empty-trash",
 		    G_CALLBACK (handle_empty_trash),
 		    self);
+
+  g_signal_connect (self->file_operations,
+		    "handle-copy-uris-with-timestamp",
+		    G_CALLBACK (handle_copy_uris_with_timestamp),
+		    self);
+  g_signal_connect (self->file_operations,
+		    "handle-copy-file-with-timestamp",
+		    G_CALLBACK (handle_copy_file_with_timestamp),
+		    self);
+  g_signal_connect (self->file_operations,
+		    "handle-empty-trash-with-timestamp",
+		    G_CALLBACK (handle_empty_trash_with_timestamp),
+		    self);
 }
 
 static void
