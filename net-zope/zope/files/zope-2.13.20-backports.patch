http://svn.zope.org/?rev=124871&view=rev
http://svn.zope.org/?rev=126684&view=rev
http://svn.zope.org/?rev=127274&view=rev
http://svn.zope.org/?rev=127275&view=rev
http://svn.zope.org/?rev=127347&view=rev

--- src/OFS/event.py
+++ src/OFS/event.py
@@ -16,11 +16,12 @@
 """
 
 from zope.interface import implements
-from zope.component.interfaces import ObjectEvent
+from zope.interface.interfaces import ObjectEvent
 import OFS.interfaces
 
 
 class ObjectWillBeMovedEvent(ObjectEvent):
+
     """An object will be moved."""
     implements(OFS.interfaces.IObjectWillBeMovedEvent)
 
@@ -31,7 +32,9 @@
         self.newParent = newParent
         self.newName = newName
 
+
 class ObjectWillBeAddedEvent(ObjectWillBeMovedEvent):
+
     """An object will be added to a container."""
     implements(OFS.interfaces.IObjectWillBeAddedEvent)
 
@@ -43,7 +46,9 @@
         ObjectWillBeMovedEvent.__init__(self, object, None, None,
                                         newParent, newName)
 
+
 class ObjectWillBeRemovedEvent(ObjectWillBeMovedEvent):
+
     """An object will be removed from a container."""
     implements(OFS.interfaces.IObjectWillBeRemovedEvent)
 
@@ -55,6 +60,8 @@
         ObjectWillBeMovedEvent.__init__(self, object, oldParent, oldName,
                                         None, None)
 
+
 class ObjectClonedEvent(ObjectEvent):
+
     """An object has been cloned into a container."""
     implements(OFS.interfaces.IObjectClonedEvent)
--- src/OFS/interfaces.py
+++ src/OFS/interfaces.py
@@ -16,6 +16,7 @@
 from zope.container.interfaces import IContainer
 from zope.interface import Attribute
 from zope.interface import Interface
+from zope.interface.interfaces import IObjectEvent
 from zope.location.interfaces import IRoot
 from zope.schema import Bool, BytesLine, Tuple
 
@@ -577,7 +578,7 @@
         """
 
     def manage_exportObject(id='', download=None, toxml=None,
-                            RESPONSE=None,REQUEST=None):
+                            RESPONSE=None, REQUEST=None):
         """Exports an object to a file and returns that file."""
 
     def manage_importObject(file, REQUEST=None, set_owner=1):
@@ -891,8 +892,6 @@
 ##################################################
 # Event interfaces
 
-from zope.component.interfaces import IObjectEvent
-
 class IObjectWillBeMovedEvent(IObjectEvent):
     """An object will be moved."""
     oldParent = Attribute("The old location parent for the object.")
@@ -900,12 +899,15 @@
     newParent = Attribute("The new location parent for the object.")
     newName = Attribute("The new location name for the object.")
 
+
 class IObjectWillBeAddedEvent(IObjectWillBeMovedEvent):
     """An object will be added to a container."""
 
+
 class IObjectWillBeRemovedEvent(IObjectWillBeMovedEvent):
     """An object will be removed from a container"""
 
+
 class IObjectClonedEvent(IObjectEvent):
     """An object has been cloned (a la Zope 2).
 
--- src/OFS/ObjectManager.py
+++ src/OFS/ObjectManager.py
@@ -48,12 +48,12 @@
 from webdav.Lockable import ResourceLockedError
 from webdav.NullResource import NullResource
 from zExceptions import BadRequest
-from zope.interface import implements
-from zope.component.interfaces import ComponentLookupError
+from zope.container.contained import notifyContainerModified
 from zope.event import notify
+from zope.interface import implements
+from zope.interface.interfaces import ComponentLookupError
 from zope.lifecycleevent import ObjectAddedEvent
 from zope.lifecycleevent import ObjectRemovedEvent
-from zope.container.contained import notifyContainerModified
 
 from OFS.CopySupport import CopyContainer
 from OFS.interfaces import IObjectManager
--- src/OFS/tests/event.txt
+++ src/OFS/tests/event.txt
@@ -51,12 +51,13 @@
 framework's ones, so ours will be called first. This has the effect that
 printed events will be in their "natural" order::
 
-  >>> from zope.component.interfaces import IObjectEvent, IRegistrationEvent
-  >>> from zope.lifecycleevent.interfaces import IObjectMovedEvent
+  >>> from zope.interface.interfaces import IObjectEvent
+  >>> from zope.interface.interfaces import IRegistrationEvent
   >>> from zope.lifecycleevent.interfaces import IObjectCopiedEvent
-  >>> from OFS.interfaces import IObjectWillBeMovedEvent
-  >>> from OFS.interfaces import IObjectClonedEvent
+  >>> from zope.lifecycleevent.interfaces import IObjectMovedEvent
   >>> from OFS.interfaces import IItem
+  >>> from OFS.interfaces import IObjectClonedEvent
+  >>> from OFS.interfaces import IObjectWillBeMovedEvent
   >>> def printObjectEvent(object, event):
   ...     print event.__class__.__name__, object.getId()
   >>> def printObjectEventExceptSome(object, event):
--- src/OFS/tests/testCopySupportEvents.py
+++ src/OFS/tests/testCopySupportEvents.py
@@ -5,22 +5,18 @@
 
 import transaction
 
-from Testing.makerequest import makerequest
+from zope import component
+from zope import interface
+from zope.interface.interfaces import IObjectEvent
+from zope.testing import cleanup
 
 from AccessControl.SecurityManagement import newSecurityManager
 from AccessControl.SecurityManagement import noSecurityManager
-
-from OFS.SimpleItem import SimpleItem
 from OFS.Folder import Folder
-
+from OFS.SimpleItem import SimpleItem
+from Testing.makerequest import makerequest
 from Zope2.App import zcml
 
-from zope import interface
-from zope import component
-from zope.component.interfaces import IObjectEvent
-
-from zope.testing import cleanup
-
 
 class EventLogger(object):
     def __init__(self):
@@ -38,6 +34,7 @@
 class ITestItem(interface.Interface):
     pass
 
+
 class TestItem(SimpleItem):
     interface.implements(ITestItem)
     def __init__(self, id):
@@ -47,6 +44,7 @@
 class ITestFolder(interface.Interface):
     pass
 
+
 class TestFolder(Folder):
     interface.implements(ITestFolder)
     def __init__(self, id):
@@ -330,4 +328,3 @@
     suite.addTest(makeSuite(TestCopySupport))
     suite.addTest(makeSuite(TestCopySupportSublocation))
     return suite
-
--- src/Products/Five/browser/metaconfigure.py
+++ src/Products/Five/browser/metaconfigure.py
@@ -20,16 +20,16 @@
 import os
 from inspect import ismethod
 
-from zope import component
-from zope.interface import implements
-from zope.interface import Interface
-from zope.component.zcml import handler
+from zope.component import queryMultiAdapter
 from zope.component.interface import provideInterface
+from zope.component.zcml import handler
 from zope.configuration.exceptions import ConfigurationError
+from zope.interface import implements
+from zope.interface import Interface
 from zope.publisher.interfaces import NotFound
-from zope.publisher.interfaces.browser import IDefaultBrowserLayer
 from zope.publisher.interfaces.browser import IBrowserPublisher
 from zope.publisher.interfaces.browser import IBrowserRequest
+from zope.publisher.interfaces.browser import IDefaultBrowserLayer
 from zope.security.zcml import Permission
 
 import zope.browserpage.metaconfigure
@@ -64,11 +64,6 @@
 
     if not (class_ or template):
         raise ConfigurationError("Must specify a class or template")
-    if allowed_attributes is None:
-        allowed_attributes = []
-    if allowed_interface is not None:
-        for interface in allowed_interface:
-            allowed_attributes.extend(interface.names(all=True))
 
     if attribute != '__call__':
         if template:
@@ -93,6 +88,7 @@
         cdict = getSecurityInfo(class_)
         cdict['__name__'] = name
         if template:
+            # class and template
             new_class = makeClassForTemplate(template, bases=(class_, ),
                                              cdict=cdict, name=name)
         elif attribute != "__call__":
@@ -121,21 +117,30 @@
             # some security declarations on it so we really shouldn't
             # modify the original.  So, instead we make a new class
             # with just one base class -- the original
-            new_class = makeClass(class_.__name__, 
+            new_class = makeClass(class_.__name__,
                                   (class_, BrowserView), cdict)
 
     else:
         # template
         new_class = makeClassForTemplate(template, name=name)
 
+    if allowed_attributes is None:
+        allowed_attributes = []
+    if allowed_interface is not None:
+        for interface in allowed_interface:
+            allowed_attributes.extend(interface.names(all=True))
+
     _handle_for(_context, for_)
 
     _context.action(
-        discriminator = ('view', for_, name, IBrowserRequest, layer),
+        discriminator = ('view', (for_, layer), name, IBrowserRequest),
         callable = handler,
         args = ('registerAdapter',
                 new_class, (for_, layer), Interface, name, _context.info),
         )
+
+        # Security
+
     _context.action(
         discriminator = ('five:protectClass', new_class),
         callable = protectClass,
@@ -167,6 +172,7 @@
         args = (new_class,)
         )
 
+
 class pages(zope.browserpage.metaconfigure.pages):
 
     def page(self, _context, name, attribute='__call__', template=None,
@@ -192,7 +198,7 @@
 class view(zope.browserpage.metaconfigure.view):
 
     def __call__(self):
-        (_context, name, for_, permission, layer, class_,
+        (_context, name, (for_, layer), permission, class_,
          allowed_interface, allowed_attributes) = self.args
 
         name = str(name)  # De-unicode
@@ -203,6 +209,7 @@
         pages = {}
 
         for pname, attribute, template in self.pages:
+
             if template:
                 cdict[pname] = ViewPageTemplateFile(template)
                 if attribute and attribute != name:
@@ -225,8 +232,7 @@
 
                 if name in pages:
                     return getattr(self, pages[name])
-                view = component.queryMultiAdapter((self, request), name=name,
-                                                   default=None)
+                view = queryMultiAdapter((self, request), name=name)
                 if view is not None:
                     return view
 
@@ -239,8 +245,7 @@
 
                 if name in pages:
                     return getattr(self, pages[name])
-                view = component.queryMultiAdapter((self, request), name=name,
-                                                   default=None)
+                view = queryMultiAdapter((self, request), name=name)
                 if view is not None:
                     return view
 
@@ -269,10 +274,10 @@
             cname = str(name)
         except:
             cname = "GeneratedClass"
-            
+
         cdict['__name__'] = name
         newclass = makeClass(cname, bases, cdict)
-        
+
         _handle_for(_context, for_)
 
         if self.provides is not None:
@@ -283,22 +288,21 @@
                 )
 
         _context.action(
-            discriminator = ('view', for_, name, IBrowserRequest, layer,
-                             self.provides),
+            discriminator = ('view', (for_, layer), name, self.provides),
             callable = handler,
             args = ('registerAdapter',
                     newclass, (for_, layer), self.provides, name,
                     _context.info),
             )
-        
+
         # Security
-        
+
         _context.action(
             discriminator = ('five:protectClass', newclass),
             callable = protectClass,
             args = (newclass, permission)
             )
-        
+
         if allowed_attributes:
             for attr in allowed_attributes:
                 _context.action(
@@ -306,7 +310,7 @@
                     callable = protectName,
                     args = (newclass, attr, permission)
                     )
-        
+
         # Make everything else private
         allowed = allowed_attributes or []
         private_attrs = [name for name in dir(newclass)
@@ -319,7 +323,7 @@
                 callable = protectName,
                 args = (newclass, attr, CheckerPrivateId, False)
                 )
-        
+
         # Protect the class
         _context.action(
             discriminator = ('five:initialize:class', newclass),
@@ -444,6 +448,7 @@
             args = (new_class,)
             )
 
+
 class ViewMixinForAttributes(BrowserView,
                              zope.browserpage.metaconfigure.simple):
 
@@ -457,6 +462,7 @@
     def __call__(self):
         return getattr(self, self.__page_attribute__)
 
+
 class ViewMixinForTemplates(BrowserView):
     # Cloned from zope.app.pagetemplate.simpleviewclass.simple
     implements(IBrowserPublisher)
@@ -492,4 +498,3 @@
         class_.__used_for__ = used_for
 
     return class_
-
--- src/Products/Five/browser/tests/test_pagetemplatefile.py
+++ src/Products/Five/browser/tests/test_pagetemplatefile.py
@@ -1,5 +1,6 @@
 import unittest
 
+
 class ViewPageTemplateFileTests(unittest.TestCase):
 
     def setUp(self):
@@ -192,7 +193,7 @@
         return self._getTargetClass()(ob, request)
 
     def test___getitem___miss(self):
-        from zope.component import ComponentLookupError
+        from zope.interface.interfaces import ComponentLookupError
         mapper = self._makeOne()
         self.assertRaises(ComponentLookupError, mapper.__getitem__, 'nonesuch')
 
--- src/Products/Five/component/browser.py
+++ src/Products/Five/component/browser.py
@@ -19,8 +19,8 @@
 from Products.Five.component.interfaces import IObjectManagerSite
 
 from zope.component.globalregistry import base
+from zope.component.hooks import setSite
 from zope.component.persistentregistry import PersistentComponents
-from zope.site.hooks import setSite
 
 
 class ObjectManagerSiteView(BrowserView):
--- src/Products/Five/component/component.txt
+++ src/Products/Five/component/component.txt
@@ -19,8 +19,8 @@
 Now we create a site object with a stub component registry:
 
   >>> from OFS.ObjectManager import ObjectManager
+  >>> from zope.component.interfaces import ISite
   >>> from zope.interface import alsoProvides
-  >>> from zope.location.interfaces import ISite
 
   >>> components = object()
   >>> site = ObjectManager()
@@ -30,7 +30,7 @@
 When we adapt the site itself, we obviously get its component
 registry:
 
-  >>> from zope.component.interfaces import IComponentLookup
+  >>> from zope.interface.interfaces import IComponentLookup
   >>> IComponentLookup(site) is components
   True
  
--- src/Products/Five/component/configure.zcml
+++ src/Products/Five/component/configure.zcml
@@ -4,7 +4,7 @@
   <adapter factory=".siteManagerAdapter" />
 
   <subscriber
-      for="zope.location.interfaces.ISite
+      for="zope.component.interfaces.ISite
            zope.traversing.interfaces.IBeforeTraverseEvent"
       handler="zope.site.site.threadSiteSubscriber"
       />
--- src/Products/Five/component/__init__.py
+++ src/Products/Five/component/__init__.py
@@ -14,10 +14,10 @@
 """Five local component look-up support
 """
 
-import zope.interface
 import zope.component
 import zope.event
-from zope.component.interfaces import IComponentLookup
+import zope.interface
+from zope.interface.interfaces import IComponentLookup
 from zope.traversing.interfaces import BeforeTraverseEvent
 
 import ExtensionClass
@@ -36,7 +36,7 @@
 
 
 # Hook up custom component architecture calls
-from zope.site.hooks import setHooks
+from zope.component.hooks import setHooks
 setHooks()
 
 
@@ -72,7 +72,7 @@
     # We want the original object, not stuff in between, and no acquisition
     obj = aq_base(obj)
     if not IPossibleSite.providedBy(obj):
-        raise TypeError, 'Must provide IPossibleSite'
+        raise TypeError('Must provide IPossibleSite')
     hook = AccessRule(HOOK_NAME)
     registerBeforeTraverse(obj, hook, HOOK_NAME, 1)
 
--- src/Products/Five/component/interfaces.py
+++ src/Products/Five/component/interfaces.py
@@ -14,8 +14,10 @@
 """Component interfaces
 """
 
-from zope.location.interfaces import ISite
+from zope.component.interfaces import ISite
 from OFS.interfaces import IObjectManager
 
+
 class IObjectManagerSite(IObjectManager, ISite):
+
     """Object manager that is also a site."""
--- src/Products/Five/component/makesite.txt
+++ src/Products/Five/component/makesite.txt
@@ -18,7 +18,7 @@
 
 Enable local component lookup hooks:
 
-    >>> from zope.site.hooks import setHooks
+    >>> from zope.component.hooks import setHooks
     >>> setHooks()
 
 
@@ -48,7 +48,7 @@
 
 Now we ensure that the folder has been turned into a site:
 
-    >>> from zope.location.interfaces import ISite
+    >>> from zope.component.interfaces import ISite
     >>> ISite.providedBy(app.folder)
     True
 
@@ -56,7 +56,7 @@
 component registry:
 
     >>> sm = app.folder.getSiteManager()
-    >>> from zope.component.interfaces import IComponents
+    >>> from zope.interface.interfaces import IComponents
     >>> IComponents.providedBy(sm)
     True
 
--- src/Products/Five/viewlet/manager.py
+++ src/Products/Five/viewlet/manager.py
@@ -27,7 +27,7 @@
     """A base class for Viewlet managers to work in Zope2"""
 
     template = None
-    
+
     def __getitem__(self, name):
         """See zope.interface.common.mapping.IReadMapping"""
         # Find the viewlet
@@ -37,7 +37,7 @@
 
         # If the viewlet was not found, then raise a lookup error
         if viewlet is None:
-            raise zope.component.interfaces.ComponentLookupError(
+            raise zope.interface.interfaces.ComponentLookupError(
                 'No provider with name `%s` found.' %name)
 
         # If the viewlet cannot be accessed, then raise an
@@ -77,7 +77,7 @@
 
 def ViewletManager(name, interface, template=None, bases=()):
     attrDict = {'__name__': name}
-    
+
     if template is not None:
         attrDict['template'] = ZopeTwoPageTemplateFile(template)
 
--- src/Testing/ZopeTestCase/functional.py
+++ src/Testing/ZopeTestCase/functional.py
@@ -29,8 +29,8 @@
     '''
     from AccessControl.SecurityManagement import getSecurityManager
     from AccessControl.SecurityManagement import setSecurityManager
-    from zope.site.hooks import getSite
-    from zope.site.hooks import setSite
+    from zope.component.hooks import getSite
+    from zope.component.hooks import setSite
 
     def wrapped_func(*args, **kw):
         sm, site = getSecurityManager(), getSite()
