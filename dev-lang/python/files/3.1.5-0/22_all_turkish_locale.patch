https://bugs.gentoo.org/show_bug.cgi?id=250075
http://bugs.python.org/issue1813

--- Lib/decimal.py
+++ Lib/decimal.py
@@ -152,6 +152,13 @@
 ROUND_HALF_DOWN = 'ROUND_HALF_DOWN'
 ROUND_05UP = 'ROUND_05UP'
 
+import string
+
+def ascii_upper(s):
+    trans_table = str.maketrans(string.ascii_lowercase, string.ascii_uppercase)
+    return s.translate(trans_table)
+
+
 # Errors
 
 class DecimalException(ArithmeticError):
@@ -3767,7 +3774,7 @@
                                     if name.startswith('_round_')]
 for name in rounding_functions:
     # name is like _round_half_even, goes to the global ROUND_HALF_EVEN value.
-    globalname = name[1:].upper()
+    globalname = ascii_upper(name[1:])
     val = globals()[globalname]
     Decimal._pick_rounding_function[val] = name
 
--- Lib/locale.py
+++ Lib/locale.py
@@ -335,6 +335,15 @@
 # overridden below)
 _setlocale = setlocale
 
+# Avoid relying on the locale-dependent .lower() method
+# (see bug #1813).
+_ascii_lower_map = ''.join(
+    chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
+    for x in range(256)
+)
+
+
+
 def normalize(localename):
 
     """ Returns a normalized locale code for the given locale
@@ -352,7 +361,7 @@
 
     """
     # Normalize the locale name and extract the encoding
-    fullname = localename.lower()
+    fullname = localename.translate(_ascii_lower_map)
     if ':' in fullname:
         # ':' is sometimes used as encoding delimiter.
         fullname = fullname.replace(':', '.')
--- Lib/test/test_codecs.py
+++ Lib/test/test_codecs.py
@@ -1,5 +1,6 @@
 from test import support
 import unittest
+import locale
 import codecs
 import sys, _testcapi, io
 
@@ -1215,6 +1216,16 @@
         self.assertRaises(LookupError, codecs.lookup, "__spam__")
         self.assertRaises(LookupError, codecs.lookup, " ")
 
+    def test_lookup_with_locale(self):
+        # Bug #1813: when normalizing codec name, lowercasing must be locale
+        # agnostic, otherwise the looked up codec name might end up wrong.
+        try:
+            locale.setlocale(locale.LC_CTYPE, 'tr')
+        except locale.Error:
+            # SKIPped test
+            return
+        codecs.lookup('ISO8859_1')
+
     def test_getencoder(self):
         self.assertRaises(TypeError, codecs.getencoder)
         self.assertRaises(LookupError, codecs.getencoder, "__spam__")
--- Python/codecs.c
+++ Python/codecs.c
@@ -45,6 +45,12 @@
     return -1;
 }
 
+/* isupper() forced into the ASCII locale */
+#define ascii_isupper(x) (((x) >= 0x41) && ((x) <= 0x5A))
+/* tolower() forced into the ASCII locale */
+#define ascii_tolower(x) (ascii_isupper(x) ? ((x) + 0x20) : (x))
+
+
 /* Convert a string to a normalized Python string: all characters are
    converted to lower case, spaces are replaced with underscores. */
 
@@ -69,7 +75,7 @@
         if (ch == ' ')
             ch = '-';
         else
-            ch = tolower(Py_CHARMASK(ch));
+            ch = ascii_tolower(Py_CHARMASK(ch));
         p[i] = ch;
     }
     p[i] = '\0';
