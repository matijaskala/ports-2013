http://bugs.python.org/issue1674555

--- Lib/site.py
+++ Lib/site.py
@@ -540,8 +540,9 @@
     known_paths = venv(known_paths)
     if ENABLE_USER_SITE is None:
         ENABLE_USER_SITE = check_enableusersite()
-    known_paths = addusersitepackages(known_paths)
-    known_paths = addsitepackages(known_paths)
+    if os.environ.get("_PYTHONNOSITEPACKAGES") is None:
+        known_paths = addusersitepackages(known_paths)
+        known_paths = addsitepackages(known_paths)
     setquit()
     setcopyright()
     sethelper()
--- Lib/test/regrtest.py
+++ Lib/test/regrtest.py
@@ -143,6 +143,7 @@
 import unittest
 import warnings
 from inspect import isabstract
+from subprocess import Popen, PIPE
 
 try:
     import threading
@@ -432,7 +433,6 @@
     subprocess exits, its return code, stdout and stderr are returned as a
     3-tuple.
     """
-    from subprocess import Popen, PIPE
     base_cmd = ([sys.executable] + support.args_from_interpreter_flags() +
                 ['-X', 'faulthandler', '-m', 'test.regrtest'])
 
@@ -643,6 +643,56 @@
     support.use_resources = ns.use_resources
     save_modules = sys.modules.keys()
 
+    opt_args = support.args_from_interpreter_flags()
+    base_cmd = [sys.executable] + opt_args
+    base_cmd += ['-X', 'faulthandler', '-m', 'test.regrtest']
+    debug_output_pat = re.compile(r"\[\d+ refs, \d+ blocks\]$")
+
+    def _runtest(test, verbose, quiet, huntrleaks=False, use_resources=None,
+                 output_on_failure=False, failfast=False, match_tests=None,
+                 timeout=None):
+        if test == "test_site":
+            slaveargs = ((test, verbose, quiet),
+                         dict(huntrleaks=huntrleaks,
+                              use_resources=use_resources,
+                              output_on_failure=output_on_failure,
+                              timeout=timeout, failfast=failfast,
+                              match_tests=match_tests))
+            env = os.environ.copy()
+            try:
+                del env["_PYTHONNOSITEPACKAGES"]
+            except KeyError:
+                pass
+            popen = Popen(base_cmd + ['--slaveargs', json.dumps(slaveargs)],
+                          stdout=PIPE, stderr=PIPE,
+                          universal_newlines=True,
+                          close_fds=(os.name != 'nt'),
+                          env=env)
+            stdout, stderr = popen.communicate()
+            retcode = popen.wait()
+            # Strip last refcount output line if it exists, since it
+            # comes from the shutdown of the interpreter in the subcommand.
+            stderr = debug_output_pat.sub("", stderr)
+            stdout, _, result = stdout.strip().rpartition("\n")
+            if retcode != 0:
+                result = (CHILD_ERROR, "Exit code %s" % retcode)
+            else:
+                result = json.loads(result)
+            if stdout:
+                print(stdout)
+            if stderr:
+                print(stderr, file=sys.stderr)
+            if result[0] == INTERRUPTED:
+                assert result[1] == 'KeyboardInterrupt'
+                raise KeyboardInterrupt
+            return result
+        else:
+            return runtest(test, verbose, quiet, huntrleaks=huntrleaks,
+                           use_resources=use_resources,
+                           output_on_failure=output_on_failure,
+                           failfast=failfast, match_tests=match_tests,
+                           timeout=timeout)
+
     def accumulate_result(test, result):
         ok, test_time = result
         test_times.append((test_time, test))
@@ -680,7 +730,6 @@
             print("Multiprocess option requires thread support")
             sys.exit(2)
         from queue import Queue
-        debug_output_pat = re.compile(r"\[\d+ refs, \d+ blocks\]$")
         output = Queue()
         pending = MultiprocessTests(tests)
         def work():
@@ -752,15 +801,15 @@
             if ns.trace:
                 # If we're tracing code coverage, then we don't exit with status
                 # if on a false return value from main.
-                tracer.runctx('runtest(test, ns.verbose, ns.quiet, timeout=ns.timeout)',
+                tracer.runctx('_runtest(test, ns.verbose, ns.quiet, timeout=ns.timeout)',
                               globals=globals(), locals=vars())
             else:
                 try:
-                    result = runtest(test, ns.verbose, ns.quiet,
-                                     ns.huntrleaks,
-                                     output_on_failure=ns.verbose3,
-                                     timeout=ns.timeout, failfast=ns.failfast,
-                                     match_tests=ns.match_tests)
+                    result = _runtest(test, ns.verbose, ns.quiet,
+                                      ns.huntrleaks,
+                                      output_on_failure=ns.verbose3,
+                                      timeout=ns.timeout, failfast=ns.failfast,
+                                      match_tests=ns.match_tests)
                     accumulate_result(test, result)
                 except KeyboardInterrupt:
                     interrupted = True
@@ -817,8 +866,8 @@
             sys.stdout.flush()
             try:
                 ns.verbose = True
-                ok = runtest(test, True, ns.quiet, ns.huntrleaks,
-                             timeout=ns.timeout)
+                ok = _runtest(test, True, ns.quiet, ns.huntrleaks,
+                              timeout=ns.timeout)
             except KeyboardInterrupt:
                 # print a newline separate from the ^C
                 print()
@@ -1239,8 +1288,9 @@
         for name, get, restore in self.resource_info():
             current = get()
             original = saved_values.pop(name)
-            # Check for changes to the resource's value
-            if current != original:
+            # Check for changes to the resource's value. test_site is always run
+            # in a subprocess and is allowed to change os.environ and sys.path.
+            if current != original and self.testname != "test_site":
                 self.changed = True
                 restore(original)
                 if not self.quiet:
--- Lib/test/test_site.py
+++ Lib/test/test_site.py
@@ -8,6 +8,7 @@
 import test.support
 from test.support import captured_stderr, TESTFN, EnvironmentVarGuard
 import builtins
+import importlib
 import os
 import sys
 import re
@@ -26,6 +27,10 @@
 
 import site
 
+if "_PYTHONNOSITEPACKAGES" in os.environ:
+    del os.environ["_PYTHONNOSITEPACKAGES"]
+    importlib.reload(site)
+
 if site.ENABLE_USER_SITE and not os.path.isdir(site.USER_SITE):
     # need to add user site directory for tests
     os.makedirs(site.USER_SITE)
--- Makefile.pre.in
+++ Makefile.pre.in
@@ -944,7 +944,7 @@
 ######################################################################
 
 TESTOPTS=	$(EXTRATESTOPTS)
-TESTPYTHON=	$(RUNSHARED) ./$(BUILDPYTHON) $(TESTPYTHONOPTS)
+TESTPYTHON=	_PYTHONNOSITEPACKAGES=1 $(RUNSHARED) ./$(BUILDPYTHON) $(TESTPYTHONOPTS)
 TESTRUNNER=	$(TESTPYTHON) $(srcdir)/Tools/scripts/run_tests.py
 TESTTIMEOUT=	3600
 
