http://code.google.com/p/feedparser/issues/detail?id=311

--- feedparser/feedparser.py
+++ feedparser/feedparser.py
@@ -200,65 +200,50 @@
     else:
         _XML_AVAILABLE = 1
 
-# sgmllib is not available by default in Python 3; if the end user doesn't have
-# it available then we'll lose illformed XML parsing, content santizing, and
-# microformat support (at least while feedparser depends on BeautifulSoup).
 try:
     import sgmllib
 except ImportError:
-    # This is probably Python 3, which doesn't include sgmllib anymore
-    _SGML_AVAILABLE = 0
-
-    # Mock sgmllib enough to allow subclassing later on
-    class sgmllib(object):
-        class SGMLParser(object):
-            def goahead(self, i):
-                pass
-            def parse_starttag(self, i):
-                pass
-else:
-    _SGML_AVAILABLE = 1
-
-    # sgmllib defines a number of module-level regular expressions that are
-    # insufficient for the XML parsing feedparser needs. Rather than modify
-    # the variables directly in sgmllib, they're defined here using the same
-    # names, and the compiled code objects of several sgmllib.SGMLParser
-    # methods are copied into _BaseHTMLProcessor so that they execute in
-    # feedparser's scope instead of sgmllib's scope.
-    charref = re.compile('&#(\d+|[xX][0-9a-fA-F]+);')
-    tagfind = re.compile('[a-zA-Z][-_.:a-zA-Z0-9]*')
-    attrfind = re.compile(
-        r'\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)[$]?(\s*=\s*'
-        r'(\'[^\']*\'|"[^"]*"|[][\-a-zA-Z0-9./,:;+*%?!&$\(\)_#=~\'"@]*))?'
-    )
-
-    # Unfortunately, these must be copied over to prevent NameError exceptions
-    entityref = sgmllib.entityref
-    incomplete = sgmllib.incomplete
-    interesting = sgmllib.interesting
-    shorttag = sgmllib.shorttag
-    shorttagopen = sgmllib.shorttagopen
-    starttagopen = sgmllib.starttagopen
-
-    class _EndBracketRegEx:
-        def __init__(self):
-            # Overriding the built-in sgmllib.endbracket regex allows the
-            # parser to find angle brackets embedded in element attributes.
-            self.endbracket = re.compile('''([^'"<>]|"[^"]*"(?=>|/|\s|\w+=)|'[^']*'(?=>|/|\s|\w+=))*(?=[<>])|.*?(?=[<>])''')
-        def search(self, target, index=0):
-            match = self.endbracket.match(target, index)
-            if match is not None:
-                # Returning a new object in the calling thread's context
-                # resolves a thread-safety.
-                return EndBracketMatch(match)
-            return None
-    class EndBracketMatch:
-        def __init__(self, match):
-            self.match = match
-        def start(self, n):
-            return self.match.end(n)
-    endbracket = _EndBracketRegEx()
+    import _feedparser_sgmllib as sgmllib
 
+# sgmllib defines a number of module-level regular expressions that are
+# insufficient for the XML parsing feedparser needs. Rather than modify
+# the variables directly in sgmllib, they're defined here using the same
+# names, and the compiled code objects of several sgmllib.SGMLParser
+# methods are copied into _BaseHTMLProcessor so that they execute in
+# feedparser's scope instead of sgmllib's scope.
+charref = re.compile('&#(\d+|[xX][0-9a-fA-F]+);')
+tagfind = re.compile('[a-zA-Z][-_.:a-zA-Z0-9]*')
+attrfind = re.compile(
+    r'\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)[$]?(\s*=\s*'
+    r'(\'[^\']*\'|"[^"]*"|[][\-a-zA-Z0-9./,:;+*%?!&$\(\)_#=~\'"@]*))?'
+)
+
+# Unfortunately, these must be copied over to prevent NameError exceptions
+entityref = sgmllib.entityref
+incomplete = sgmllib.incomplete
+interesting = sgmllib.interesting
+shorttag = sgmllib.shorttag
+shorttagopen = sgmllib.shorttagopen
+starttagopen = sgmllib.starttagopen
+
+class _EndBracketRegEx:
+    def __init__(self):
+        # Overriding the built-in sgmllib.endbracket regex allows the
+        # parser to find angle brackets embedded in element attributes.
+        self.endbracket = re.compile('''([^'"<>]|"[^"]*"(?=>|/|\s|\w+=)|'[^']*'(?=>|/|\s|\w+=))*(?=[<>])|.*?(?=[<>])''')
+    def search(self, target, index=0):
+        match = self.endbracket.match(target, index)
+        if match is not None:
+            # Returning a new object in the calling thread's context
+            # resolves a thread-safety.
+            return EndBracketMatch(match) 
+        return None
+class EndBracketMatch:
+    def __init__(self, match):
+        self.match = match
+    def start(self, n):
+        return self.match.end(n)
+endbracket = _EndBracketRegEx()
 
 # iconv_codec provides support for more character encodings.
 # It's available from http://cjkpython.i18n.org/
@@ -2562,9 +2547,6 @@
         _BaseHTMLProcessor.unknown_starttag(self, tag, attrs)
 
 def _resolveRelativeURIs(htmlSource, baseURI, encoding, _type):
-    if not _SGML_AVAILABLE:
-        return htmlSource
-
     p = _RelativeURIResolver(baseURI, encoding, _type)
     p.feed(htmlSource)
     return p.output()
@@ -2854,8 +2836,6 @@
 
 
 def _sanitizeHTML(htmlSource, encoding, _type):
-    if not _SGML_AVAILABLE:
-        return htmlSource
     p = _HTMLSanitizer(encoding, _type)
     htmlSource = htmlSource.replace('<![CDATA[', '&lt;![CDATA[')
     p.feed(htmlSource)
@@ -3999,7 +3979,7 @@
             result['bozo'] = 1
             result['bozo_exception'] = feedparser.exc or e
             use_strict_parser = 0
-    if not use_strict_parser and _SGML_AVAILABLE:
+    if not use_strict_parser:
         feedparser = _LooseFeedParser(baseuri, baselang, 'utf-8', entities)
         feedparser.feed(data.decode('utf-8', 'replace'))
     result['feed'] = feedparser.feeddata
--- setup.py
+++ setup.py
@@ -1,9 +1,22 @@
 from setuptools import setup
+from setuptools.command.build_py import build_py as _build_py
+import os
 import sys
 
 extra = {}
 if sys.version_info >= (3, ):
+    class build_py(_build_py):
+        def build_modules(self):
+            _build_py.build_modules(self)
+            # Don't run 2to3 on _feedparser_sgmllib.py.
+            for module in self.__updated_files:
+                if os.path.basename(module) == "_feedparser_sgmllib.py":
+                    self.__updated_files.remove(module)
+    extra['cmdclass'] = {'build_py': build_py}
+    extra['py_modules'] = ['feedparser', '_feedparser_sgmllib']
     extra['use_2to3'] = True
+else:
+    extra['py_modules'] = ['feedparser']
 
 setup(
     name = 'feedparser',
@@ -16,7 +29,6 @@
     download_url = 'http://code.google.com/p/feedparser/',
     platforms = ['POSIX', 'Windows'],
     package_dir = {'': 'feedparser'},
-    py_modules = ['feedparser'],
     keywords = ['atom', 'cdf', 'feed', 'parser', 'rdf', 'rss'],
     classifiers = [
         'Development Status :: 5 - Production/Stable',
