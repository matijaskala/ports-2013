diff -aurN a/Client/CookieManager.php b/Client/CookieManager.php
--- a/Client/CookieManager.php	2008-10-25 13:08:26.000000000 -0400
+++ b/Client/CookieManager.php	2017-08-07 10:17:04.495233973 -0400
@@ -75,11 +75,14 @@
     * @access   public
     * @see      serializeSessionCookies()
     */
-    function HTTP_Client_CookieManager($serializeSession = false)
+    function __construct($serializeSession = false)
     {
         $this->serializeSessionCookies($serializeSession);
     }
-
+    function HTTP_Client_CookieManager($serializeSession = false)
+    {
+        self::__construct($serializeSession);
+    }
    /**
     * Sets whether session cookies should be serialized when serializing object
     *
@@ -264,4 +267,3 @@
         }
     }
 }
-?>
diff -aurN a/Client.php b/Client.php
--- a/Client.php	2008-10-25 13:08:26.000000000 -0400
+++ b/Client.php	2017-08-07 10:13:52.524610550 -0400
@@ -171,12 +171,12 @@
     * @param    array                       Default headers to send on every request
     * @param    HTTP_Client_CookieManager   Cookie manager object to use
     */
-    function HTTP_Client($defaultRequestParams = null, $defaultHeaders = null, $cookieManager = null)
+    function __construct($defaultRequestParams = null, $defaultHeaders = null, $cookieManager = null)
     {
         if (!empty($cookieManager) && is_a($cookieManager, 'HTTP_Client_CookieManager')) {
             $this->_cookieManager = $cookieManager;
         } else {
-            $this->_cookieManager =& new HTTP_Client_CookieManager();
+            $this->_cookieManager = new HTTP_Client_CookieManager();
         }
         if (isset($defaultHeaders)) {
             $this->setDefaultHeader($defaultHeaders);
@@ -185,7 +185,10 @@
             $this->setRequestParameter($defaultRequestParams);
         }
     }
-
+    function HTTP_Client($defaultRequestParams = null, $defaultHeaders = null, $cookieManager = null)
+    {
+        self::__construct($defaultRequestParams, $defaultHeaders, $cookieManager);
+    }
 
    /**
     * Sets the maximum redirects that will be processed.
@@ -225,7 +228,7 @@
     */
     function &_createRequest($url, $method = HTTP_REQUEST_METHOD_GET, $headers = array())
     {
-        $req =& new HTTP_Request($url, $this->_defaultRequestParams);
+        $req = new HTTP_Request($url, $this->_defaultRequestParams);
         $req->setMethod($method);
         foreach ($this->_defaultHeaders as $name => $value) {
             $req->addHeader($name, $value);
@@ -716,4 +719,3 @@
         return $this->_idx < count($this->_responses);
     }
 }
-?>
